
MERGE INTO `shopify-pubsub-project.Data_Warehouse_Shopify_Staging.Refund_Orders` AS target

USING (
  SELECT 
distinct
_airbyte_extracted_at,
id as Refund_id,
note as Refund_note,
restock,
user_id,
order_id,
shop_url,
created_at as Refund_created_at,
processed_at as Refund_processed_at,
CAST(ROUND(CAST(JSON_EXTRACT_SCALAR(transactions[0], "$.amount") AS FLOAT64)) AS INT64) AS transaction_amount,
CAST(JSON_EXTRACT_SCALAR(transactions[0], "$.message") AS STRING) AS refund_message,
CAST(JSON_EXTRACT_SCALAR(transactions[0], "$.status") AS STRING) AS refund_status,
CAST(JSON_EXTRACT_SCALAR(transactions[0], "$.payment_id") AS STRING) AS payment_id,
CAST(JSON_EXTRACT_SCALAR(total_duties_set, '$.presentment_money.amount') AS FLOAT64) as presentment_amount,
CAST(JSON_EXTRACT_SCALAR(order_adjustments[0], "$.amount") AS FLOAT64) AS order_adjustment_amount,
CAST(JSON_EXTRACT_SCALAR(order_adjustments[0], "$.kind") AS STRING) AS order_adjustment_kind,
CAST(JSON_EXTRACT_SCALAR(order_adjustments[0], "$.tax_amount") AS FLOAT64) AS order_adjustment_tax,
CAST(JSON_EXTRACT_SCALAR(refund_line_items[0], "$.line_item.fulfillable_quantity") AS INT64) AS fulfillable_quantity,
CAST(JSON_EXTRACT_SCALAR(refund_line_items[0], "$.line_item.fulfillment_service") AS STRING) AS fulfillment_service,
CAST(JSON_EXTRACT_SCALAR(refund_line_items[0], "$.line_item.fulfillment_status") AS STRING) AS fulfillment_status,
CAST(JSON_EXTRACT_SCALAR(refund_line_items[0], "$.line_item.gift_card") AS BOOL) AS gift_card,
CAST(JSON_EXTRACT_SCALAR(refund_line_items[0], "$.line_item.name") AS STRING) AS refund_item_name,
CAST(ROUND(CAST(JSON_EXTRACT_SCALAR(refund_line_items[0], "$.line_item.price") AS FLOAT64)) AS INT64) AS refund_item_price,
CAST(JSON_EXTRACT_SCALAR(refund_line_items[0], "$.line_item.product_id") AS INT64) AS refund_product_id,
CAST(JSON_EXTRACT_SCALAR(refund_line_items[0], "$.line_item.quantity") AS INT64) AS refund_item_quantity,
CAST(JSON_EXTRACT_SCALAR(refund_line_items[0], "$.line_item.sku") AS STRING) AS refund_sku_code,
CAST(JSON_EXTRACT_SCALAR(refund_line_items[0], "$.line_item.tax_lines[0].price") AS FLOAT64)AS tax_line_price,
CAST(ROUND(CAST(JSON_EXTRACT_SCALAR(refund_line_items[0], "$.subtotal") AS FLOAT64)) AS INT64) AS refund_item_subtotal,
CAST(JSON_EXTRACT_SCALAR(refund_line_items[0], "$.total_tax") AS FLOAT64) AS total_tax,
CAST(JSON_EXTRACT_SCALAR(refund_line_items[0], "$.line_item.vendor") AS STRING) AS order_refund_vendor,
admin_graphql_api_id
from `shopify-pubsub-project.pilgrim_bi_airbyte.order_refunds`

  WHERE DATE(_airbyte_extracted_at) >= DATE_SUB(CURRENT_DATE("Asia/Kolkata"), INTERVAL 10 DAY)
) AS source

ON target.Refund_id = source.Refund_id
and target.refund_product_id = source.refund_product_id

WHEN MATCHED AND source._airbyte_extracted_at > target._airbyte_extracted_at THEN UPDATE SET

  target._airbyte_extracted_at = source._airbyte_extracted_at,
  target.Refund_id = source.Refund_id,
  target.Refund_note = source.Refund_note,
  target.restock = source.restock,
  target.user_id = source.user_id,
  target.order_id = source.order_id,
  target.shop_url = source.shop_url,
  target.Refund_created_at = source.Refund_created_at,
  target.Refund_processed_at = source.Refund_processed_at,
  target.transaction_amount = source.transaction_amount,
  target.refund_message = source.refund_message,
  target.refund_status = source.refund_status,
  target.payment_id = source.payment_id,
  target.presentment_amount = source.presentment_amount,
  target.order_adjustment_amount = source.order_adjustment_amount,
  target.order_adjustment_kind = source.order_adjustment_kind,
  target.order_adjustment_tax = source.order_adjustment_tax,
  target.fulfillable_quantity = source.fulfillable_quantity,
  target.fulfillment_service = source.fulfillment_service,
  target.fulfillment_status = source.fulfillment_status,
  target.gift_card = source.gift_card,
  target.refund_item_name = source.refund_item_name,
  target.refund_item_price = source.refund_item_price,
  target.refund_product_id = source.refund_product_id,
  target.refund_item_quantity = source.refund_item_quantity,
  target.refund_sku_code = source.refund_sku_code,
  target.tax_line_price = source.tax_line_price,
  target.refund_item_subtotal = source.refund_item_subtotal,
  target.total_tax = source.total_tax,
  target.order_refund_vendor = source.order_refund_vendor,
  target.admin_graphql_api_id = source.admin_graphql_api_id
  

WHEN NOT MATCHED THEN INSERT (
_airbyte_extracted_at,
Refund_id,
Refund_note,
restock,
user_id,
order_id,
shop_url,
Refund_created_at,
Refund_processed_at,
transaction_amount,
refund_message,
refund_status,
payment_id,
presentment_amount,
order_adjustment_amount,
order_adjustment_kind,
order_adjustment_tax,
fulfillable_quantity,
fulfillment_service,
fulfillment_status,
gift_card,
refund_item_name,
refund_item_price,
refund_product_id,
refund_item_quantity,
refund_sku_code,
tax_line_price,
refund_item_subtotal,
total_tax,
order_refund_vendor,
admin_graphql_api_id
) VALUES (
  source._airbyte_extracted_at,
source.Refund_id,
source.Refund_note,
source.restock,
source.user_id,
source.order_id,
source.shop_url,
source.Refund_created_at,
source.Refund_processed_at,
source.transaction_amount,
source.refund_message,
source.refund_status,
source.payment_id,
source.presentment_amount,
source.order_adjustment_amount,
source.order_adjustment_kind,
source.order_adjustment_tax,
source.fulfillable_quantity,
source.fulfillment_service,
source.fulfillment_status,
source.gift_card,
source.refund_item_name,
source.refund_item_price,
source.refund_product_id,
source.refund_item_quantity,
source.refund_sku_code,
source.tax_line_price,
source.refund_item_subtotal,
source.total_tax,
source.order_refund_vendor,
source.admin_graphql_api_id
);
